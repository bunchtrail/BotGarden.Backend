// <auto-generated />
using System;
using BotGardens.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BotGardens.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BotGardens.Domain.Entities.BiometricData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Indicator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InventoryNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("InventoryNumber");

                    b.ToTable("BiometricDatas");
                });

            modelBuilder.Entity("BotGardens.Domain.Entities.Family", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("BotGardens.Domain.Entities.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BotGardens.Domain.Entities.PhenologicalData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("InventoryNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObservationYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Phenophase")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("InventoryNumber");

                    b.ToTable("PhenologicalDatas");
                });

            modelBuilder.Entity("BotGardens.Domain.Entities.Plant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ConservationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeterminedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DuplicatesInOtherHerbaria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EcologyAndBiology")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EconomicUse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FamilyID")
                        .HasColumnType("integer");

                    b.Property<string>("FilledBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasHerbarium")
                        .HasColumnType("boolean");

                    b.Property<string>("Illustration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InventoryNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LocationID")
                        .HasColumnType("integer");

                    b.Property<string>("NaturalHabitat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Originator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlantingYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SampleOrigin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SectorID")
                        .HasColumnType("integer");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Synonyms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Variety")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YearCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FamilyID");

                    b.HasIndex("InventoryNumber")
                        .IsUnique();

                    b.HasIndex("LocationID");

                    b.HasIndex("SectorID");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("BotGardens.Domain.Entities.Sector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("BotGardens.Domain.Entities.BiometricData", b =>
                {
                    b.HasOne("BotGardens.Domain.Entities.Plant", "Plant")
                        .WithMany("BiometricDatas")
                        .HasForeignKey("InventoryNumber")
                        .HasPrincipalKey("InventoryNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("BotGardens.Domain.Entities.PhenologicalData", b =>
                {
                    b.HasOne("BotGardens.Domain.Entities.Plant", "Plant")
                        .WithMany("PhenologicalDatas")
                        .HasForeignKey("InventoryNumber")
                        .HasPrincipalKey("InventoryNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("BotGardens.Domain.Entities.Plant", b =>
                {
                    b.HasOne("BotGardens.Domain.Entities.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotGardens.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotGardens.Domain.Entities.Sector", "Sector")
                        .WithMany("Plants")
                        .HasForeignKey("SectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("Location");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("BotGardens.Domain.Entities.Plant", b =>
                {
                    b.Navigation("BiometricDatas");

                    b.Navigation("PhenologicalDatas");
                });

            modelBuilder.Entity("BotGardens.Domain.Entities.Sector", b =>
                {
                    b.Navigation("Plants");
                });
#pragma warning restore 612, 618
        }
    }
}
