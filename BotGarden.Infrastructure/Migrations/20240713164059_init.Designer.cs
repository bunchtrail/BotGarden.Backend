// <auto-generated />
using System;
using BotGarden.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BotGardens.Infrastructure.Migrations
{
    [DbContext(typeof(BotanicGardenContext))]
    [Migration("20240713164059_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("BotGarden.Domain.Models.BotGardenMode", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("LocationId"));

                    b.Property<Polygon>("Geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("LocationPath")
                        .HasColumnType("text");

                    b.HasKey("LocationId");

                    b.ToTable("BotGarden");
                });

            modelBuilder.Entity("BotGarden.Domain.Models.Collections", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("CollectionId"));

                    b.Property<string>("CollectionName")
                        .HasColumnType("text");

                    b.HasKey("CollectionId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("BotGarden.Domain.Models.Genus", b =>
                {
                    b.Property<int>("GenusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("GenusId"));

                    b.Property<string>("GenusName")
                        .HasColumnType("text");

                    b.HasKey("GenusId");

                    b.ToTable("Genus");
                });

            modelBuilder.Entity("BotGarden.Domain.Models.PlantFamilies", b =>
                {
                    b.Property<int>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("FamilyId"));

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FamilyId");

                    b.ToTable("PlantFamilies");
                });

            modelBuilder.Entity("BotGarden.Domain.Models.Plants", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("PlantId"));

                    b.Property<int?>("BiometricId")
                        .HasColumnType("integer");

                    b.Property<int?>("BotGardenModeLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("CollectionsCollectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Date")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("DateOfPlanting")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Determined")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EcologyBiology")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("EconomicUse")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("FamilyId")
                        .HasColumnType("integer");

                    b.Property<string>("FilledOut")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Form")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("GenusId")
                        .HasColumnType("integer");

                    b.Property<string>("HerbariumDuplicate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("HerbariumPresence")
                        .HasColumnType("boolean");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("InventorNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MeasurementType")
                        .HasColumnType("text");

                    b.Property<string>("NaturalHabitat")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Originator")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("PhenophaseDate")
                        .HasColumnType("text");

                    b.Property<string>("PlantOrigin")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ProtectionStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int?>("SectorId")
                        .HasColumnType("integer");

                    b.Property<string>("Species")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Synonyms")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("Variety")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.Property<string>("YearOfObs")
                        .HasColumnType("text");

                    b.HasKey("PlantId");

                    b.HasIndex("BotGardenModeLocationId");

                    b.HasIndex("CollectionsCollectionId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("GenusId");

                    b.HasIndex("SectorId");

                    b.ToTable("Plants", (string)null);
                });

            modelBuilder.Entity("BotGarden.Domain.Models.Sectors", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("SectorId"));

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SectorId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("BotGardens.Domain.Models.Users", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("userId"));

                    b.Property<string>("userEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userHashedPass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BotGarden.Domain.Models.Plants", b =>
                {
                    b.HasOne("BotGarden.Domain.Models.BotGardenMode", null)
                        .WithMany("Plants")
                        .HasForeignKey("BotGardenModeLocationId");

                    b.HasOne("BotGarden.Domain.Models.Collections", null)
                        .WithMany("Plants")
                        .HasForeignKey("CollectionsCollectionId");

                    b.HasOne("BotGarden.Domain.Models.PlantFamilies", "Family")
                        .WithMany("Plants")
                        .HasForeignKey("FamilyId");

                    b.HasOne("BotGarden.Domain.Models.Genus", "Genus")
                        .WithMany("Plants")
                        .HasForeignKey("GenusId");

                    b.HasOne("BotGarden.Domain.Models.Sectors", "Sector")
                        .WithMany("Plants")
                        .HasForeignKey("SectorId");

                    b.Navigation("Family");

                    b.Navigation("Genus");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("BotGarden.Domain.Models.BotGardenMode", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("BotGarden.Domain.Models.Collections", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("BotGarden.Domain.Models.Genus", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("BotGarden.Domain.Models.PlantFamilies", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("BotGarden.Domain.Models.Sectors", b =>
                {
                    b.Navigation("Plants");
                });
#pragma warning restore 612, 618
        }
    }
}
